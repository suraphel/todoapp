{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"A:\\\\Projects\\\\React\\\\ReactCDN\\\\demoII\\\\todoapp\\\\todoapp\\\\src\\\\Container\\\\ContactUs.js\";\nimport React from 'react';\nimport Rainbow from '../hoc/Rainbow';\n\nconst ContactUs = props => {\n  //  setTimeout(()=> {\n  //      props.history.push('/home')\n  //  }, 2000);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"center\",\n      children: \"ContactUs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [' ', \"Unfortunately, the world of programming doesn\\u2019t really fall into four cleanly separated parts. Therefore, the \\u201Cparts\\u201D of this book provide only a coarse classification of topics. We consider it a useful classification (obviously, or we wouldn\\u2019t have used it), but reality has a way of escaping neat classifications. For example, we need to use input operations far sooner than we can give a thorough explanation of C++ standard I/O streams (input/output streams). Where the set of topics needed to present an idea conflicts with the overall classification, we explain the minimum needed for a good presentation, rather than just referring to the complete explanation elsewhere. Rigid classifications work much better for manuals than for tutorials.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 3\n  }, this);\n};\n\n_c = ContactUs;\nexport default _c2 = Rainbow(ContactUs);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ContactUs\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["A:/Projects/React/ReactCDN/demoII/todoapp/todoapp/src/Container/ContactUs.js"],"names":["React","Rainbow","ContactUs","props"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAC5B;AACA;AACA;AACA,sBACC;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACC;AAAI,MAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAA,iBACE,GADF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAiBA,CArBD;;KAAMD,S;AAsBN,qBAAeD,OAAO,CAACC,SAAD,CAAtB","sourcesContent":["import React from 'react';\r\nimport Rainbow from '../hoc/Rainbow';\r\n\r\nconst ContactUs = (props) => {\r\n\t//  setTimeout(()=> {\r\n\t//      props.history.push('/home')\r\n\t//  }, 2000);\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<h4 className=\"center\">ContactUs</h4>\r\n\t\t\t<p>\r\n\t\t\t\t{' '}\r\n\t\t\t\tUnfortunately, the world of programming doesn’t really fall into four cleanly separated\r\n\t\t\t\tparts. Therefore, the “parts” of this book provide only a coarse classification of\r\n\t\t\t\ttopics. We consider it a useful classification (obviously, or we wouldn’t have used it),\r\n\t\t\t\tbut reality has a way of escaping neat classifications. For example, we need to use\r\n\t\t\t\tinput operations far sooner than we can give a thorough explanation of C++ standard I/O\r\n\t\t\t\tstreams (input/output streams). Where the set of topics needed to present an idea\r\n\t\t\t\tconflicts with the overall classification, we explain the minimum needed for a good\r\n\t\t\t\tpresentation, rather than just referring to the complete explanation elsewhere. Rigid\r\n\t\t\t\tclassifications work much better for manuals than for tutorials.\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default Rainbow(ContactUs);\r\n"]},"metadata":{},"sourceType":"module"}